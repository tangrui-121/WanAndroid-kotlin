import org.json.JSONObject

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'io.objectbox'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk AppConfig.compileSdkVersion

    defaultConfig {
        applicationId AppConfig.applicationId
        minSdk AppConfig.minSdkVersion
        targetSdk AppConfig.targetSdkVersion
        versionCode AppConfig.versionCode
        versionName AppConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

//    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.lifecycle:lifecycle-common:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'

    implementation project(path: ':base')

    implementation(WanAndroidExt.viewBinding)
    implementation(WanAndroidExt.toastUtils)
    implementation(WanAndroidExt.Smartrefresh)
    implementation(WanAndroidExt.SmartrefreshHead)
    implementation(WanAndroidExt.anko)
    implementation(WanAndroidExt.mmkv)
    implementation(WanAndroidExt.banner)
    implementation(WanAndroidExt.glide)
    implementation(WanAndroidExt.BRV)
    implementation 'io.github.scwang90:refresh-header-classics:2.0.5'

    //hilt support begin
    implementation(WanAndroidExt.hilt)
    kapt(WanAndroidExt.hilt_compiler)
    //hilt support end

//    implementation project(':flutter')
}

/**
 * 上传蒲公英
 */
tasks.register("pgyer", Exec.class) {
    def assemble = tasks.named("assembleRelease").get()
    dependsOn("clean", assemble)
    assemble.mustRunAfter("clean")

    def tree = fileTree("build") {
        include("outputs/apk/release/*.apk", "intermediates/apk/release/*.apk")
    }
    doFirst {
        def apiKey = "1cb5a6cbd16939001468f2e49c9ee243"
        def apkPath = tree.first().absolutePath
        println("Upload Apk: $apkPath")

        // curl -v -F file=@"app-release.apk" -F _api_key=f29f61a418b61847b8c7d709c0115ab6 -F buildUpdateDescription="$(git log -3 --pretty=%s)" https://www.pgyer.com/apiv2/app/upload
        // 命令行嵌套有点问题，所以git log在一个新的exec中执行
        def gitOutput = new ByteArrayOutputStream()
        exec {
            commandLine("git", "log", "-3", "--pretty=%s")
            standardOutput = gitOutput
        }
        commandLine("curl", "-v",
                "-F", "file=@$apkPath",
                "-F", "_api_key=$apiKey",
                "-F", "buildUpdateDescription=${gitOutput.toString()}",
                "https://www.pgyer.com/apiv2/app/upload"
        )
    }
    def output = new ByteArrayOutputStream()
    standardOutput = output
    doLast {
        def result = output.toString()
        def obj = new JSONObject(result)
        if (obj.getInt("code") == 0) {
            def path = obj.getJSONObject("data")
                    .getString("buildShortcutUrl")
            println("Upload succeeded: https://www.pgyer.com/$path")
        } else {
            def message = obj.getString("message")
            println("Upload failed: $message")
        }
    }
}